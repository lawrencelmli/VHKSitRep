library(tidyverse)
library(shiny)
library(shinythemes)
library(xtable)
library(shinyjs)
library(knitr)
library(kableExtra)
# library(pagedown)

insulin <- readRDS("insulin.rda")
drugsUI <- readRDS("drugsUI.rda")
orthoDrugsUI <- readRDS("orthoDrugsUI.rda")

allDrugsUI <- rbind(drugsUI, orthoDrugsUI)

BrHighRiskA <- readRDS("BrHighRiskA.rda")
BrHighRiskB <- readRDS("BrHighRiskB.rda")

BrHighRiskRenalA <- readRDS("BrHighRiskRenalA.rda")
BrHighRiskRenalB <- readRDS("BrHighRiskRenalB.rda")

BrLowRisk <- readRDS("BrLowRisk.rda")

# options(shiny.error = function() {
#  stop("Please complete selection before proceeding")
# }) # only works locally

# User Interface

ui <- fluidPage(theme = shinytheme("flatly"), useShinyjs(),
                
  titlePanel("Pre-operative Advice on Long-term Medications before Elective Surgery - version 0.3"),
  h3("Please refer to Local Guideline on Shared Drive or Intranet for full guidance"),
  br(),
  strong(p("Disclaimer:")), 
  
  p("This app is intended to be used by a healthcare professional in conjunction with the local guideline."),
  
  p("The concept for the app was conceived at the Royal College of Anaesthetists #Hack Day in 2017."), 
  p("This app was written by Lawrence Li, the code for the original app was written by Danny JN Wong."),
  a(href="https://github.com/dannyjnwong/PreopDrugs", "Click here for the source code for original app."),
  
  hr(),
  
  h5("Use a made-up ID here if printing forms for multiple patients"),
  
  div(id = "form",
    div(style="display: inline-block;vertical-align:top; width: 300px;", textInput("px_name", label = NULL, placeholder = "Use ID to find printout")),
    div(style="display: inline-block;vertical-align:top; width: 150px;",HTML("<br>")),
    # div(style="display: inline-block;vertical-align:top; width: 300px;", textInput("dob", label = NULL, placeholder = "Date of Birth or CHI"))
  ),
  
  br(),
  
  tabsetPanel(
    tabPanel("Long-term Medications", fluid = TRUE,
            sidebarLayout(
              sidebarPanel(
                helpText("Please complete the following steps to proceed:"),
                div(id = "drugChoiceReset",
                  selectInput("ortho", "1.  Is patient having major orthopaedic (hip/knee) surgery?",
                            c("", "Yes", "No"),
                            selected = NULL),
                  hidden(div(id = "drugStep2", 
                      selectInput("hf", "2.  Is the patient known to have heart failure?",
                            c("", "Yes", "No"),
                            selected = NULL))),
                  hidden(div(id = "drugStep3",
                      selectInput("pht", "3.  Is the patient known to have pulmonary hypertension?",
                            c("", "Yes", "No"),
                            selected = NULL))),
                  hidden(div(id = "drugStep4",
                      p("4.  Confirm to see search box"),
                  checkboxInput("confirm", "Confirm selections", value = FALSE)
                  ))
                ),
                actionButton("reset", "Reset"),
                
                width = 3),
              
              mainPanel(
                br(),
                helpText("For HRT and Oral Contraception, please type in the words 'HRT' or 'Contraceptives' and refer to local guideline. 
                         Please also discuss with surgical or anaesthetic teams regarding more complex patients on antiplatelets or anticoagulants"),
                
                
                div(id = "drugBox",
                    uiOutput("drugs_sel")
                    ),
                
                p("Notes for PAC Nurses: Patients on anticoagulation may require bridging, please discuss with anaesthetist/cardiologist/haematologist"),
                
                uiOutput("note"),
                
                uiOutput("note2"),
                
                p("The tables can be printed either by using Download button (pdf or html formats) or print directly from browser."),
                
                hr(),
                
                h4(textOutput(outputId = "px_name1")),
                
                # h4(textOutput(outputId = "dob1")),
                
                h3(textOutput("ortho_hdr")),
                
                p(textOutput("ortho_text")),
                
                tableOutput("sp_ortho_tab_app"),
                
                tableOutput("drugs_table"),
                
                tags$style(type="text/css",
                         ".shiny-output-error { visibility: hidden; }",
                         ".shiny-output-error:before { visibility: hidden; }"
                ), # This hides the error message before the choices are made
                
                div(style="display: inline-block;vertical-align:middle;", downloadButton('downloadDrugReport', "Download as pdf")),
                
                div(style="display: inline-block;vertical-align:middle; width: 20px;", HTML("<br>")),
                
                div(style="display: inline-block;vertical-align:middle;", helpText("Easier to print")),
                
                p(""),
                
                div(style="display: inline-block;vertical-align:middle;", downloadButton('downloadDrug', "Download as HTML")),
                
                div(style="display: inline-block;vertical-align:middle; width: 5px;", HTML("<br>")),
                
                div(style="display: inline-block;vertical-align:middle; ", helpText("Better layout, print from browser"))
                
              )
            )
     
    ),
     
    tabPanel("Insulin", fluid = TRUE,
      sidebarLayout(
        sidebarPanel(
          
          helpText("Please complete the following steps to proceed:"),
          
          div(id = "insulinChoiceReset",
            selectInput("DM", "1.  What type of diabetes does patient have?",
                      c("",
                        "Type One" = "Type 1",
                        "Type Two on Insulin" = "Type 2"),
                      selected = NULL),
          
            hidden(div(id = "insulinStep2",
                selectInput("time", "2.  Is patient on morning or afternoon list?",
                      c("",
                        "Morning List" = "AM",
                        "Afternoon List" = "PM"),
                      selected = NULL))),
            
            hidden(div(id = "insulinStep3",
                checkboxGroupInput("class", "3.  Which type(s) of insulin is patient on?",
                             c("Long and Intermediate acting",
                               "Pre-Mixed",
                               "Rapid or Short acting"))))
            ),
          
          actionButton("reset_insulin", "Reset"),
          width = 3),
        
        mainPanel(
          br(),
          
          helpText("Choose from the type(s) of insulin from left panel before typing",
                   "Please ensure the type(s) of insulin are correct before proceeding"),
          
          div(id = "insulinBox",
              uiOutput("insulin_sel")
              ),
          
          h3(textOutput(outputId = "px_name2")),
          
          br(),
          
          h4(textOutput(outputId = "dob2")),
          
          br(),
          
          tableOutput("insulin_table"),
          
          div(style="display: inline-block;vertical-align:middle;", downloadButton('downloadInsulinReport', "Download as pdf")),
          
          div(style="display: inline-block;vertical-align:middle; width: 20px;", HTML("<br>")),
          
          div(style="display: inline-block;vertical-align:middle; ", helpText("Easier to print")),
          
          p(""),
          
          div(style="display: inline-block;vertical-align:middle;", downloadButton('downloadInsulin', "Download as HTML")),
          
          div(style="display: inline-block;vertical-align:middle; width: 5px;", HTML("<br>")),
          
          div(style="display: inline-block;vertical-align:middle; ", helpText("Better layout, print from browser"))
          
        )
        
      )
      
    ),
    
    tabPanel(
      "Bridging Warfarin", fluid = TRUE,
      sidebarLayout(
        sidebarPanel(
          div(id = "resetBridge",
              div(id = "Bridge.1",
                  dateInput("OpDate", label = "1. Please select date of operation"),
                  
                  checkboxInput("box1", "Confirm Date of Operation", value = F)),
              
              hidden(
                div(id = "Bridge.2",
                    p("2. Enter Patient Details"),
                    selectInput("sex", "Male or Female",
                            c("", "Male", "Female"),
                            selected = NULL),
                
                    numericInput("age", "Patient's Age in years", 
                                 value = NULL),
                    
                    numericInput("weight", "Patient's Weight in Kg",
                                 value = NULL),
                    
                    numericInput("height", "Patient's Height in cm",
                                 value = NULL),
                    
                    numericInput("creat", HTML("Most recent creatinine (&mu;mol/L)"),
                                 value = NULL),
                    
                    checkboxInput("box2", "Confirm values entered", value = F))),
              
              hidden(
                div(id = "Bridge.3",
                    helpText("Please refer to full guideline on how to determine Thrombotic Risk"),
              
                    tags$a(href = "risks.jpg", "Quick reference to Thrombotic Risk criteria", target = "_blank"),
                    
                    br(),
                    
                    selectInput("thromRisk", "3. What is the Thrombotic Risk?",
                                c("", "High", "Low"),
                                selected = NULL))),
              
              ),
          
          actionButton("reset_bridge", "Reset"),
          
          width = 2),
        
        mainPanel(
          wellPanel(
            p("Please check that all the details are correct. 
              The author does not take responsibility for any unintended consequences as a result of using this app."),
            
            div(id = "opName",
                textInput("operation", "What is the planned procedure?", placeholder = "Enter planned operation here")
                ),
            
            p(strong("This app is based on the NHS Fife Guideline on Perioperative Management of Anticoagulation Therapy for Elective Surgery and Procedures")),
            p(strong("It is intended to be used by a health professional in conjunction with the full guideline.")),
            
            br(),
            
            p("For advice on what to do with the Direct Oral Anticoagulants (such as Rivaroxaban, Dabigatrin), please refer to the full guideline.")
          ),
          
          div(id = "brValues",
            div(div(style="display: inline-block;vertical-align:top; ", p("Patient's Weight: ")),
              div(style="display: inline-block;vertical-align:top; ", strong(textOutput(outputId = "brWeight"))),
              div(style="display: inline-block;vertical-align:top; ", p(" Kg"))
                ),
          
            div(div(style="display: inline-block;vertical-align:top; ", p("Patient's BMI: ")),
                div(style="display: inline-block;vertical-align:top; ", strong(textOutput(outputId = "brBMI"))),
                div(style="display: inline-block;vertical-align:top; ", HTML(paste(" Kg/m", "<sup>2<sup>")))
                ),
            
            div(div(style="display: inline-block;vertical-align:top; ", p("Patient's CrCl: ")),
                div(style="display: inline-block;vertical-align:top; ", strong(textOutput(outputId = "clearance"))),
                div(style="display: inline-block;vertical-align:top; ", p(" ml/min")),
                div(style="display: inline-block;vertical-align:top; ", p("(CrCl based on Adjusted Body Weight if BMI is over 30)"))
                ),
            
            div(div(style="display: inline-block;vertical-align:top; ", p("Thrombotic Risk: ")),
                div(style="display: inline-block;vertical-align:top; ", strong(textOutput(outputId = "clotRisk")))
                ),
            
            div(div(style="display: inline-block;vertical-align:top; ", p("Planned Operation: ")),
                div(style="display: inline-block;vertical-align:top; ", strong(textOutput(outputId = "opType"))),
                )
          ),
          
          br(),
          
          # tableOutput(outputId = "bridgeInst"), kable is better
          
          htmlOutput("bridgeKable"),
          
          # helpText(textOutput("renal_text")),
          strong(textOutput("br_star")),
          
          br(),
          
          strong(textOutput("br_note")),
          
          textOutput("br_text1"),
          
          textOutput("br_text2"),
          
          textOutput("br_text3"),
          
          br(),
          
          hidden(
            div(id = "download",
                div(style="display: inline-block;vertical-align:middle;", downloadButton('downloadBridging', "Download as HTML")),
                div(style="display: inline-block;vertical-align:middle; width: 5px;", HTML("<br>")),
                div(style="display: inline-block;vertical-align:middle; ", helpText("Save as HTML and print from browser"))
            )
          )
        )
      )
    ),
    
    tabPanel(
      "Useful Links",
      mainPanel(
        br(),
        
        HTML(paste0("For Anaesthetic and Pre-operative Assessment Guidelines, please see ", 
                    a(href = "https://intranet.fife.scot.nhs.uk/pages/index.cfm?fuseaction=service.display&objectid=D6E54C6A-A23C-F85D-02E710B226242A64", "intranet site."))),
        
        br(),
        
        p("These are also available on the T: Drive, please ask your line manager for access.")
      )
    )
  )
)
  


server <- function(input, output){
  ## shinyjs code:
  
  observe({
    shinyjs::toggle(id = "drugBox", condition = input$confirm)
  })
  
  observe({
    shinyjs::toggle(id = "drugStep2", condition = input$ortho)
  })
  
  observe({
    shinyjs::toggle(id = "drugStep3", condition = input$hf)
  })
  
  observe({
    shinyjs::toggle(id = "drugStep4", condition = input$pht)
  })
  
  observe({
    shinyjs::toggle(id = "insulinStep2", condition = input$DM)
  })
  
  observe({
    shinyjs::toggle(id = "insulinStep3", condition = input$time)
  })
  
  observe({
    shinyjs::toggle(id = "insulinBox", condition = input$class)
  })
  
 
  
  observeEvent(input$reset, {
    shinyjs::reset(id = "drugChoiceReset")
  })
  observeEvent(input$reset, {
    shinyjs::reset(id = "form")
  })
  
  observeEvent(input$reset_insulin, {
    shinyjs::reset(id = "insulinChoiceReset")
  })
  
  observeEvent(input$reset_insulin, {
    shinyjs::reset(id = "form")
  })
  

# Code --------------------------------------------------------------------

  
  
  output$note <- renderText({
    HTML(paste0("<b>","Recommendations","</b>", " are from the current local guidelines intended for PAC Nurses."))
  })
  
  output$note2 <- renderText({
    HTML(paste0("<b>","Plan","</b>", " is advice for patients. Only the Plan part will be printed if using the 'Download' button."))
  })
  
  my_insulin_table <- reactive({
    insulin_subset <- insulin %>% filter(DM == input$DM,
                                         Time == input$time,
                                         Class %in% input$class)
    insulin_tab <- insulin_subset %>% filter(Name %in% input$insulin_name) %>% select(Class, Name, Plan)
    return(insulin_tab)
  })
  
  ### This is for printing insulin table to pdf:
  
  pdf_insulin_table <- reactive({
    insulin_subset <- insulin %>% filter(DM == input$DM,
                                         Time == input$time,
                                         Class %in% input$class)
    insulin_tab <- insulin_subset %>% 
      filter(Name %in% input$insulin_name) %>% 
      select("Type of Insulin" = Class, 
             "Name of Insulin" = Name, 
             "What to do before your operation" = Plan)
    return(insulin_tab)
  })
  
  ### This block is for generating the final table on app
  
  my_drugs_table <- reactive({
    if(input$ortho == "No" & input$hf == "No" & input$pht == "No"){
      drugs_subset <- allDrugsUI %>% filter(Ortho == "No") %>% 
        select(Name, Recommendations, Plan = PlanNormal) 
    }else if(input$ortho == "No" & input$hf == "Yes" & input$pht == "No"){
      drugs_subset <- allDrugsUI %>% filter(Ortho == "No") %>%
        select(Name, Recommendations, Plan = PlanHFOnly) 
    }else if(input$ortho == "No" & input$hf == "No" & input$pht == "Yes"){
      drugs_subset <- allDrugsUI %>% filter(Ortho == "No") %>%
        select(Name, Recommendations, Plan = PlanPHTOnly)
    }else if(input$ortho == "No" & input$hf == "Yes" & input$pht == "Yes"){
      drugs_subset <- allDrugsUI %>% filter(Ortho == "No") %>%
        select(Name, Recommendations, Plan = PlanHFandPHT) 
    }
    
    if(input$ortho == "Yes" & input$hf == "No" & input$pht == "No"){
      drugs_subset <- allDrugsUI %>% filter(Ortho == "Yes", Special_ortho == FALSE) %>%
        select(Name, Recommendations, Plan = PlanNormal) 
    }else if(input$ortho == "Yes" & input$hf == "Yes" & input$pht == "No"){
      drugs_subset <- allDrugsUI %>% filter(Ortho == "Yes", Special_ortho == FALSE) %>%
        select(Name, Recommendations, Plan = PlanHFOnly) 
    }else if(input$ortho == "Yes" & input$hf == "No" & input$pht == "Yes"){
      drugs_subset <- allDrugsUI %>% filter(Ortho == "Yes", Special_ortho == FALSE) %>%
        select(Name, Recommendations, Plan = PlanPHTOnly) 
    }else if(input$ortho == "Yes" & input$hf == "Yes" & input$pht == "Yes"){
      drugs_subset <- allDrugsUI %>% filter(Ortho == "Yes", Special_ortho == FALSE) %>%
        select(Name, Recommendations, Plan = PlanHFandPHT) 
    }
    
    drugs_tab <- drugs_subset %>% filter(Name %in% input$drug_name) 
    
    return(drugs_tab)
  })
  
  ### Code to print the drugs plan for patients only:
  
  pdf_drugs_table <- reactive({
    if(input$ortho == "No" & input$hf == "No" & input$pht == "No"){
      drugs_subset <- allDrugsUI %>% filter(Ortho == "No") %>%
        select(Name, Recommendations, Plan = PlanNormal) 
    }else if(input$ortho == "No" & input$hf == "Yes" & input$pht == "No"){
      drugs_subset <- allDrugsUI %>% filter(Ortho == "No") %>%
        select(Name, Recommendations, Plan = PlanHFOnly) 
    }else if(input$ortho == "No" & input$hf == "No" & input$pht == "Yes"){
      drugs_subset <- allDrugsUI %>% filter(Ortho == "No") %>%
        select(Name, Recommendations, Plan = PlanPHTOnly) 
    }else if(input$ortho == "No" & input$hf == "Yes" & input$pht == "Yes"){
      drugs_subset <- allDrugsUI %>% filter(Ortho == "No") %>%
        select(Name, Recommendations, Plan = PlanHFandPHT) 
    }
    
    if(input$ortho == "Yes" & input$hf == "No" & input$pht == "No"){
      drugs_subset <- allDrugsUI %>% filter(Ortho == "Yes", Special_ortho == FALSE) %>%
        select(Name, Recommendations, Plan = PlanNormal) 
    }else if(input$ortho == "Yes" & input$hf == "Yes" & input$pht == "No"){
      drugs_subset <- allDrugsUI %>% filter(Ortho == "Yes", Special_ortho == FALSE) %>%
        select(Name, Recommendations, Plan = PlanHFOnly) 
    }else if(input$ortho == "Yes" & input$hf == "No" & input$pht == "Yes"){
      drugs_subset <- allDrugsUI %>% filter(Ortho == "Yes", Special_ortho == FALSE) %>%
        select(Name, Recommendations, Plan = PlanPHTOnly)
    }else if(input$ortho == "Yes" & input$hf == "Yes" & input$pht == "Yes"){
      drugs_subset <- allDrugsUI %>% filter(Ortho == "Yes", Special_ortho == FALSE) %>%
        select(Name, Recommendations, Plan = PlanHFandPHT) 
    }
    
    drugs_tab_pdf <- drugs_subset %>% filter(Name %in% input$drug_name) %>%
      select("Name of Drug" = Name, "What to do before operation" = Plan)
    return(drugs_tab_pdf)
  })
  
  ### The code block below is for printing (special ortho generic instructions) purposes, 
  ## using reactive to generate a special_ortho_table() function:
  
  special_ortho_table <- reactive({
    if(input$ortho == "Yes"){
      sp_ortho_table <- allDrugsUI %>%
        filter(Ortho == "Yes", 
               Special_ortho == TRUE) %>% 
       select("Type of Drug" = Name, "Usual Plan" = PlanNormal)
      
      
     }else{
       sp_ortho_table <- allDrugsUI[0,] %>% 
         select(Name, Plan = PlanNormal) # this simplifies printing a blank table by choosing just 2 columns to rename blank
       names(sp_ortho_table) <- c("", "") 
       }
    
    return(sp_ortho_table)
  })
  
  ### Using the codes below to avoid a blank table on the app UI
  ## Using observeEvent instead of reactive so I can assign NULL to the output object sp_ortho_tab_app
  
  observeEvent(input$ortho, {
    if(input$ortho == "Yes"){
      sp_ortho_table_app <- allDrugsUI %>%
        filter(Special_ortho == TRUE) %>% 
        select(Name, Recommendations, Plan = PlanNormal) 
      
      output$sp_ortho_tab_app <- renderTable({
        xtable(sp_ortho_table_app)})
      
    }else{
      output$sp_ortho_tab_app <- NULL
      
  }
    })
    
  ### Some outputs to indicate major ortho op:
  
  my_ortho_hdr <- reactive({
    if(input$ortho == "Yes"){
      sp_ortho_hdr <- ("Major hip/knee operations - replacements or revisions only")
    }else{
      sp_ortho_hdr <- NULL
    }
    return(sp_ortho_hdr)
  })
  output$ortho_hdr <- renderText(my_ortho_hdr())
  
  my_ortho_text <- reactive({
    if(input$ortho == "Yes"){
      sp_ortho_text <- ("Additional information if you are taking the following types of medications:")
    }else{
      sp_ortho_text <- NULL
    }
    return(sp_ortho_text)
  })
  
  output$ortho_text <- renderText({my_ortho_text()})
  
  output$px_name1 <- output$px_name2 <- renderText({input$px_name})
  
  output$dob1 <- output$dob2 <- renderText({input$dob}) # Now redundant
  
  # below is redundant for the app because using this generates a blank table if not for orthopaedic surgery:
  # output$ortho_table <- renderTable({
  #   xtable(special_ortho_table())
  # })
  
  # renderUI: to allow the selectizeInput to react depending on the input$ortho,
  # paired with uioutput in the ui section of the code
  
  output$drugs_sel <- renderUI({  
    drugs_subset <- allDrugsUI %>% filter(Ortho == input$ortho) %>% 
      filter(Special_ortho == FALSE)
    
    selectizeInput("drug_name", "Type in name of drug",
                   choices = list("Use non-brand (generic) name of drug" = "",
                                  "Names" = drugs_subset$Name),
                   selected = NULL,
                   multiple = TRUE,
                   options = NULL)
    
  })
  
  output$drugs_table <- renderTable({
    xtable(my_drugs_table())
  })

  output$insulin_sel <- renderUI({
    
    insulin_subset <- insulin %>% filter(DM == input$DM, 
                                         Time == input$time, 
                                         Class %in% input$class)
    
    selectizeInput("insulin_name", "Type in name of insulin",
                   choices = list("Begin by typing name of insulin" = "", 
                                  "Names" = insulin_subset$Name), 
                                  selected = NULL, 
                                  multiple = TRUE,
                                  options = NULL)
  })
  
  output$insulin_table <- renderTable({
    xtable(my_insulin_table())
  })
  
  ### Download pdf(Insulin) - can be redundant if pagedown is used:
  
  output$downloadInsulinReport <- downloadHandler(
   filename = function() {("insulin-instructions.pdf")
       # paste('my-report', sep = '.', switch(
       #   input$format, PDF = 'pdf', HTML = 'html', Word = 'docx'
       # ))
     },
   content = function(file) {
     src <- normalizePath('report_insulin.Rmd')
     src2 <- normalizePath("printout.sty")
     label <- normalizePath("pxLabel.png")
     logo <-normalizePath("logo.png")
     fasting <- normalizePath("fasting.png")
     
     # temporarily switch to the temp dir, in case you do not have write
     # permission to the current working directory
     owd <- setwd(tempdir())
     on.exit(setwd(owd))
     file.copy(src, 'report_insulin.Rmd', overwrite = TRUE)
     file.copy(src2, "printout.sty", overwrite = TRUE)
     file.copy(label, "pxLabel.png", overwrite = TRUE)
     file.copy(logo, "logo.png", overwrite = TRUE)
     file.copy(fasting, "fasting.png", overwrite = TRUE)
       
     library(rmarkdown)
     out <- render('report_insulin.Rmd', 
                   params = list(name = input$px_name, dob = input$dob),
                   'pdf_document')
     file.rename(out, file)
   }
  )
  
  ### Download html(insulin) - trying pagedown to convert to pdf:
  
  output$downloadInsulin <- downloadHandler(
    filename = function() {("insulin-instructions.html") # change this to pdf if pagedown is working
      # paste('my-report', sep = '.', switch(
      #   input$format, PDF = 'pdf', HTML = 'html', Word = 'docx'
      # ))
    },
    
    content = function(file) {
      src <- normalizePath('report_insulinHTML.Rmd')
      src2 <- normalizePath("printout.css")
      label <- normalizePath("pxLabel.png")
      logo <-normalizePath("logo.png")
      fasting <- normalizePath("fasting.png")
      
      # temporarily switch to the temp dir, in case you do not have write
      # permission to the current working directory
      owd <- setwd(tempdir())
      on.exit(setwd(owd))
      file.copy(src, 'report_insulinHTML.Rmd', overwrite = TRUE)
      file.copy(src2, "printout.css", overwrite = TRUE)
      file.copy(label, "pxLabel.png", overwrite = TRUE)
      file.copy(logo, "logo.png", overwrite = TRUE)
      file.copy(fasting, "fasting.png", overwrite = TRUE)
      
      library(rmarkdown)
      out <- render('report_insulinHTML.Rmd', 
                    params = list(name = input$px_name, dob = input$dob),
                    'html_document')
      # library(pagedown)
      # out <- pagedown::chrome_print(out, "insulin-instructions.pdf", async = TRUE)
      file.rename(out, file)
    }
  )
  
  ### Download pdf(Drugs) - can be redundant if pagedown is used:
  
  output$downloadDrugReport <- downloadHandler(
   filename = function() {("drug-instructions.pdf")
     # paste('my-report', sep = '.', switch(
     #   input$format, PDF = 'pdf', HTML = 'html', Word = 'docx'
     # ))
     },
   
   content = function(file) {
     src <- normalizePath('report_drug.Rmd')
     src2 <- normalizePath("printout.sty")
     label <- normalizePath("pxLabel.png")
     logo <-normalizePath("logo.png")
     fasting <- normalizePath("fasting.png")
       
     # temporarily switch to the temp dir, in case you do not have write
     # permission to the current working directory
     owd <- setwd(tempdir())
     on.exit(setwd(owd))
     file.copy(src, 'report_drug.Rmd', overwrite = TRUE)
     file.copy(src2, "printout.sty", overwrite = TRUE)
     file.copy(label, "pxLabel.png", overwrite = TRUE)
     file.copy(logo, "logo.png", overwrite = TRUE)
     file.copy(fasting, "fasting.png", overwrite = TRUE)
     
     library(rmarkdown)
     out <- render('report_drug.Rmd', 
                   params = list(name = input$px_name, dob = input$dob),
                   'pdf_document')
     file.rename(out, file)
   }
  )
   
  ### Download html(drugs):
  
  output$downloadDrug <- downloadHandler(
    filename = function() {("drug-instructions.html") # change this to pdf if pagedown is working
      # paste('my-report', sep = '.', switch(
      #   input$format, PDF = 'pdf', HTML = 'html', Word = 'docx'
      # ))
    },
    
    content = function(file) {
      src <- normalizePath('report_drugHTML.Rmd')
      src2 <- normalizePath("printout.css")
      label <- normalizePath("pxLabel.png")
      logo <-normalizePath("logo.png")
      fasting <- normalizePath("fasting.png")
      
      # temporarily switch to the temp dir, in case you do not have write
      # permission to the current working directory
      owd <- setwd(tempdir())
      on.exit(setwd(owd))
      file.copy(src, 'report_drugHTML.Rmd', overwrite = TRUE)
      file.copy(src2, "printout.css", overwrite = TRUE)
      file.copy(label, "pxLabel.png", overwrite = TRUE)
      file.copy(logo, "logo.png", overwrite = TRUE)
      file.copy(fasting, "fasting.png", overwrite = TRUE)
      
      library(rmarkdown)
      out <- render('report_drugHTML.Rmd', 
                    params = list(name = input$px_name, dob = input$dob),
                    'html_document')
      
      file.rename(out, file)
    }
  )
  
  
# Bridging App ------------------------------------------------------------

  
  observe({
    shinyjs::toggle(id = "Bridge.2", condition = input$box1)
  })
  
  observe({
    shinyjs::toggle(id = "Bridge.3", condition = input$box2)
  })
  
  observe({
    shinyjs::toggle(id = "download", condition = input$thromRisk)
  })
  
  observe({
    shinyjs::toggle(id = "brValues", condition = input$box2)
  })
  
  observeEvent(input$reset_bridge, {
    shinyjs::reset(id = "resetBridge")
  })
  
  observeEvent(input$reset_bridge, {
    shinyjs::reset(id = "form")
  })
  
  observeEvent(input$reset_bridge, {
    shinyjs::reset(id = "opName")
  })
  
  output$brWeight <- renderText({
    input$weight
  })
  
  output$brBMI <- reactive({
    BMI <- input$weight/((input$height)/100)^2
    BMI <- round(BMI, 1)
    return(BMI)
  })
  
  # Function to calculate crcl, then reused for differentiating final table
  
  crcl <- reactive({
    if(input$sex == "Male"){
      IBW <- 50 + (2.3*((input$height/2.54) - 60))
      BMI <- input$weight/((input$height)/100)^2
      BMI <- round(BMI, 1)
      ABW <- IBW + 0.4*(input$weight - IBW)
      
      if(BMI >= 30){
        crcl <- (((140 - input$age) * ABW)/(input$creat))*1.23
        crcl <- round(crcl, 0)
      }else if(BMI < 30){
        crcl <- (((140 - input$age) * input$weight)/(input$creat))*1.23
        crcl <- round(crcl, 0)
      }
      return(crcl)
    }else if (input$sex == "Female"){
      IBW <- 45.5 + (2.3*((input$height/2.54) - 60))
      BMI <- input$weight/((input$height)/100)^2
      BMI <- round(BMI, 1)
      ABW <- IBW + 0.4*(input$weight - IBW)
      
      if(BMI >= 30){
        crcl <- (((140 - input$age) * ABW)/(input$creat))*1.04
        crcl <- round(crcl, 0)
      }else if(BMI < 30){
        crcl <- (((140 - input$age) * input$weight)/(input$creat))*1.04
        crcl <- round(crcl, 0)
      }
      return(crcl)
    }
    
  })
  
  
  output$clearance <- renderText({
    crcl()
  })
  
  output$clotRisk <- renderText({
    input$thromRisk
  })
  
  output$blRisk <- renderText({
    input$bleedRisk
  })
  
  output$opType <- renderText({
    input$operation
  })
  
  bridgingTable <- reactive({
    
    clearance <- crcl()
    
    if(input$thromRisk == "High" & clearance >= 30){
      
      # To sort out the Date and Weekday Columns
      opdate <- as.Date(input$OpDate)
      dates <- as.Date(c(opdate - 6, opdate - 5, opdate - 4, opdate -3, opdate - 2, opdate - 1, opdate, opdate + 1, opdate + 2))
      dates_chr <- format(as.Date(c(opdate - 6, opdate - 5, opdate - 4, opdate -3, opdate - 2, opdate - 1, opdate, opdate + 1, opdate + 2)), "%d/%m/%y")
      dates_chr <- as.character(dates_chr)
      wdays <- weekdays(dates)
      
      tempDays <- cbind(dates, wdays)
      
      datesB <- as.Date(c(opdate - 8, opdate - 7, opdate - 6, opdate - 5, opdate - 4, opdate -3, opdate - 2, opdate - 1, opdate, opdate + 1, opdate + 2))
      dates_chrB <- format(as.Date(c(opdate - 8, opdate - 7, opdate - 6, opdate - 5, opdate - 4, opdate -3, opdate - 2, opdate - 1, opdate, opdate + 1, opdate + 2)), "%d/%m/%y")
      dates_chrB <- as.character(dates_chrB)
      wdaysB <- weekdays(datesB)
      
      
      if(tempDays[7, 2] == "Tuesday" | tempDays[7, 2] == "Wednesday"){
        bridge <- BrHighRiskB
        
        bridge$Date <- dates_chrB
        
        bridge$Weekday <- wdaysB
        
        
      }else{
        bridge <- BrHighRiskA
        
        bridge$Date <- dates_chr
        
        bridge$Weekday <- wdays
      }
      
      
      if(input$weight <= 46){
        bridge <- bridge %>% 
          select(Day, Date, Weekday, Warfarin, "INR Check" = INR, "Dalteparin Treatment" = TxDose_1,  "Dalteparin Prophylaxis" = Prophylaxis_1)
      }else if(input$weight > 46 & input$weight < 57){
        if(input$weight < 50){
          bridge <- bridge %>%
            select(Day, Date, Weekday, Warfarin, "INR Check" = INR, "Dalteparin Treatment" = TxDose_2, "Dalteparin Prophylaxis" = Prophylaxis_1)
        }else if(input$weight >= 50 & input$weight < 100){
          bridge <- bridge %>%
            select(Day, Date, Weekday, Warfarin, "INR Check" = INR, "Dalteparin Treatment" = TxDose_2, "Dalteparin Prophylaxis" = Prophylaxis_2)
        }
      }else if(input$weight >= 57 & input$weight < 69){
        bridge <- bridge %>%
          select(Day, Date, Weekday, Warfarin, "INR Check" = INR, "Dalteparin Treatment" = TxDose_3, "Dalteparin Prophylaxis" = Prophylaxis_2)
      }else if(input$weight >= 69  & input$weight < 83){
        bridge <- bridge %>%
          select(Day, Date, Weekday, Warfarin, "INR Check" = INR, "Dalteparin Treatment" = TxDose_4, "Dalteparin Prophylaxis" = Prophylaxis_2)
      }else if(input$weight >= 83 & input$weight < 100){
        bridge <- bridge %>%
          select(Day, Date, Weekday, "Warfarin Dose" = Warfarin, "INR Check" = INR, "Dalteparin Treatment" = TxDose_5, "Dalteparin Prophylaxis" = Prophylaxis_2)
      }else if(input$weight >= 100 & input$weight < 140){
        bridge <- bridge %>%
          select(Day, Date, Weekday, "Warfarin Dose" = Warfarin, "INR Check" = INR, "Dalteparin Treatment" = TxDose_5, "Dalteparin Prophylaxis" = Prophylaxis_3)
      }else if(input$weight >= 140 & input$weight < 180){
        bridge <- bridge %>%
          select(Day, Date, Weekday, "Warfarin Dose" = Warfarin, "INR Check" = INR, "Dalteparin Treatment" = TxDose_5, "Dalteparin Prophylaxis" = Prophylaxis_4)
      }else if(input$weight >= 180){
        bridge <- bridge %>%
          select(Day, Date, Weekday, "Warfarin Dose" = Warfarin, "INR Check" = INR, "Dalteparin Treatment" = TxDose_5, "Dalteparin Prophylaxis" = Prophylaxis_5)
      }
      
    }else if(input$thromRisk == "High" & clearance < 30){
      
      # To sort out the Date and Weekday Columns
      opdate <- as.Date(input$OpDate)
      dates <- as.Date(c(opdate - 6, opdate - 5, opdate - 4, opdate -3, opdate - 2, opdate - 1, opdate, opdate + 1, opdate + 2))
      dates_chr <- format(as.Date(c(opdate - 6, opdate - 5, opdate - 4, opdate -3, opdate - 2, opdate - 1, opdate, opdate + 1, opdate + 2)), "%d/%m/%y")
      dates_chr <- as.character(dates_chr)
      wdays <- weekdays(dates)
      
      tempDays <- cbind(dates, wdays)
      
      datesB <- as.Date(c(opdate - 8, opdate - 7, opdate - 6, opdate - 5, opdate - 4, opdate -3, opdate - 2, opdate - 1, opdate, opdate + 1, opdate + 2))
      dates_chrB <- format(as.Date(c(opdate - 8, opdate - 7, opdate - 6, opdate - 5, opdate - 4, opdate -3, opdate - 2, opdate - 1, opdate, opdate + 1, opdate + 2)), "%d/%m/%y")
      dates_chrB <- as.character(dates_chrB)
      wdaysB <- weekdays(datesB)
      
      
      if(tempDays[7, 2] == "Tuesday" | tempDays[7, 2] == "Wednesday"){
        bridge <- BrHighRiskRenalB
        
        bridge$Date <- dates_chrB
        
        bridge$Weekday <- wdaysB
        
        
      }else{
        bridge <- BrHighRiskRenalA
        
        bridge$Date <- dates_chr
        
        bridge$Weekday <- wdays
      }
      
      if(input$weight <= 40){
        bridge <- bridge %>% 
          select(Day, Date, Weekday, Warfarin, "INR Check" = INR, "Dalteparin Treatment" = TxDose_1,  "Dalteparin Prophylaxis" = Prophylaxis_1)
      }else if(input$weight >= 40 & input$weight < 100){
        if(input$weight < 46){
          bridge <- bridge %>%
            select(Day, Date, Weekday, Warfarin, "INR Check" = INR, "Dalteparin Treatment" = TxDose_1, "Dalteparin Prophylaxis" = Prophylaxis_2)
        }else if(input$weight >= 46 & input$weight < 57){
          bridge <- bridge %>%
            select(Day, Date, Weekday, Warfarin, "INR Check" = INR, "Dalteparin Treatment" = TxDose_2, "Dalteparin Prophylaxis" = Prophylaxis_2)
        }else if(input$weight >= 57 & input$weight < 69){
          bridge <- bridge %>%
            select(Day, Date, Weekday, Warfarin, "INR Check" = INR, "Dalteparin Treatment" = TxDose_3, "Dalteparin Prophylaxis" = Prophylaxis_2)
        }else if(input$weight >= 69 & input$weight < 83){
          bridge <- bridge %>%
            select(Day, Date, Weekday, Warfarin, "INR Check" = INR, "Dalteparin Treatment" = TxDose_4, "Dalteparin Prophylaxis" = Prophylaxis_2)
        }else if(input$weight >= 83){
          bridge <- bridge %>%
            select(Day, Date, Weekday, Warfarin, "INR Check" = INR, "Dalteparin Treatment" = TxDose_5, "Dalteparin Prophylaxis" = Prophylaxis_2)
        }
      }else if(input$weight >= 100 & input$weight < 140){
        bridge <- bridge %>%
          select(Day, Date, Weekday, Warfarin, "INR Check" = INR, "Dalteparin Treatment" = TxDose_5, "Dalteparin Prophylaxis" = Prophylaxis_4)
      }else if(input$weight >= 140  & input$weight < 180){
        bridge <- bridge %>%
          select(Day, Date, Weekday, Warfarin, "INR Check" = INR, "Dalteparin Treatment" = TxDose_5, "Dalteparin Prophylaxis" = Prophylaxis_5)
      }else if(input$weight >= 180){
        bridge <- bridge %>%
          select(Day, Date, Weekday, "Warfarin Dose" = Warfarin, "INR Check" = INR, "Dalteparin Treatment" = TxDose_5, "Dalteparin Prophylaxis" = Prophylaxis_6)
      }
      
    }else if(input$thromRisk == "Low" & clearance >= 30){
      bridge <- BrLowRisk
      
      # To sort out the Date and Weekday Columns
      opdate <- as.Date(input$OpDate)
      dates <- as.Date(c(opdate - 6, opdate - 5, opdate - 4, opdate -3, opdate - 2, opdate - 1, opdate, opdate + 1, opdate + 2))
      dates_chr <- format(as.Date(c(opdate - 6, opdate - 5, opdate - 4, opdate -3, opdate - 2, opdate - 1, opdate, opdate + 1, opdate + 2)), "%d/%m/%y")
      dates_chr <- as.character(dates_chr)
      bridge$Date <- dates_chr
      wdays <- weekdays(dates)
      bridge$Weekday <- wdays
      
      bridge <- bridge %>%
        select(Day, Date, Weekday, "Warfarin Dose" = Warfarin, "INR Check" = INR)
      
    }else if(input$thromRisk == "Low" & clearance < 30){ # Same as raised GFR
      bridge <- BrLowRisk
      
      # To sort out the Date and Weekday Columns
      opdate <- as.Date(input$OpDate)
      dates <- as.Date(c(opdate - 6, opdate - 5, opdate - 4, opdate -3, opdate - 2, opdate - 1, opdate, opdate + 1, opdate + 2))
      dates_chr <- format(as.Date(c(opdate - 6, opdate - 5, opdate - 4, opdate -3, opdate - 2, opdate - 1, opdate, opdate + 1, opdate + 2)), "%d/%m/%y")
      dates_chr <- as.character(dates_chr)
      bridge$Date <- dates_chr
      wdays <- weekdays(dates)
      bridge$Weekday <- wdays
      
      bridge <- bridge %>%
        select(Day, Date, Weekday, "Warfarin Dose" = Warfarin, "INR Check" = INR)
      
    }
    
    return(bridge)
    
    
  })
  
  # output$bridgeInst <- renderTable({
  #   xtable(bridgingTable())
  # })
  # kable gives better formatting
  
  bridgeStep <- reactive({
    bridgeKable1 <- bridgingTable()
    
    opdate <- as.Date(input$OpDate)
    dates <- as.Date(c(opdate - 6, opdate - 5, opdate - 4, opdate -3, opdate - 2, opdate - 1, opdate, opdate + 1, opdate + 2))
    dates_chr <- format(as.Date(c(opdate - 6, opdate - 5, opdate - 4, opdate -3, opdate - 2, opdate - 1, opdate, opdate + 1, opdate + 2)), "%d/%m/%y")
    dates_chr <- as.character(dates_chr)
    wdays <- weekdays(dates)
    
    tempDays <- cbind(dates, wdays)
    
    if(input$thromRisk == "Low"){
      finalBridge <- bridgeKable1
      finalBridge <- kable(bridgeKable1, "html", booktabs = T) %>% 
        kable_styling(full_width = TRUE, position = "center") %>% 
        row_spec(0, bold = T) %>% 
        row_spec(7, color = "black", background = "#80c3e8", bold = "T")
      
    }else if(input$thromRisk == "High"){
      if(tempDays[7, 2] == "Tuesday" | tempDays[7, 2] == "Wednesday"){
        finalBridge <- kable(bridgeKable1, "html", booktabs = T) %>% 
          kable_styling(full_width = TRUE, position = "center") %>% 
          row_spec(0, bold = T) %>% 
          row_spec(9, color = "black", background = "#80c3e8", bold = "T") %>%
          column_spec(1, width = "8em") %>%
          column_spec(5, width = "10em")
      }else{
        finalBridge <- kable(bridgeKable1, "html", booktabs = T) %>% 
          kable_styling(full_width = TRUE, position = "center") %>% 
          row_spec(0, bold = T) %>% 
          row_spec(7, color = "black", background = "#80c3e8", bold = "T") %>%
          column_spec(1, width = "8em") %>%
          column_spec(5, width = "10em")
      }
    }
    
    return(finalBridge)
  })
  
  output$bridgeKable <- renderText({
    bridgeStep()
  })
  
  brStar <- reactive({
    if(input$thromRisk == "High"){
      br_Star <- ("*Only start bridging Dalteparin if INR is less than 2.")
    }else{
      br_Star <- ("")
    }
    return(br_Star)
  })
  
  output$br_star <- renderText(brStar())
    
  brNote <- reactive({
    if(input$thromRisk == "High"){
      br_note <- ("Note:")
    }else{
      br_note <- ("")
    }
    
    return(br_note)
  })
  
  output$br_note <- renderText(brNote())
  
  brText1 <- reactive({
    if(input$thromRisk == "High"){
      br_text1 <- ("Dalteparin may be given at least 6 hours post-surgery, but only if haemostasis secured and 
                  post-operative bleeding risk is low.")
    }else{
      br_text1 <- ("")
    }
    
    return(br_text1)
  })
  
  output$br_text1 <- renderText(brText1())
  
  
  brText2 <- reactive({
    if(input$thromRisk == "High"){
      br_text2 <- ("Follow surgeon's instructions for anticoagulation post-operatively; in the absence of specific instructions, consider waiting 
                  until 24 hours post-operatively before starting Dalteparin.")
    }else{
      br_text2 <- ("")
    }
    
    return(br_text2)
  })
  
  output$br_text2 <- renderText(brText2())
  
  brText3 <- reactive({
    if(input$thromRisk == "High"){
      br_text3 <- ("Restart warfarin (at usual maintenance dose) 24 hours post procedure.  Stop Dalteparin when INR in therapeutic range post-operatively")
    }else{
      br_text3 <- ("")
    }
    
    return(br_text3)
  })
  
  output$br_text3 <- renderText(brText3())
  
  # renalText <- reactive({
  #   if(input$thromRisk == "High" | input$thromRisk == "Moderate"){
  #     renal_text <- ("*Consider using renal dose dalteparin (2500 Units OD) for prophylaxis if Serum Creatinine > 150 micromol/L") 
  #   }else{
  #     renal_text <- ("")
  #   }
  #   
  #   return(renal_text)
  #   
  # })
  # 
  # output$renal_text <- renderText(renalText())
  
  output$downloadBridging <- downloadHandler(
    
    
    filename = function() {("BridgingInstructions.html") # change this to pdf if pagedown is working
      # paste('my-report', sep = '.', switch(
      #   input$format, PDF = 'pdf', HTML = 'html', Word = 'docx'
      # ))
    },
    
    content = function(file) {
      
      src <- normalizePath('reportBridgingHTML.Rmd')
      src2 <- normalizePath("printout.css")
      label <- normalizePath("pxLabel.png")
      # clearance <- crcl()
      logo <- normalizePath("logo.png")
      
      # temporarily switch to the temp dir, in case you do not have write
      # permission to the current working directory
      owd <- setwd(tempdir())
      on.exit(setwd(owd))
      file.copy(src, 'reportBridgingHTML.Rmd', overwrite = TRUE)
      file.copy(src2, "printout.css", overwrite = TRUE)
      file.copy(label, "pxLabel.png", overwrite = TRUE)
      file.copy(logo, "logo.png", overwrite = TRUE)
      
      library(rmarkdown)
      out <- render('reportBridgingHTML.Rmd', 
                    params = list(weight = input$weight, 
                                  thromRisk = input$thromRisk, 
                                  op = input$operation, 
                                  opdate = input$OpDate, 
                                  name = input$px_name),
                    'html_document')
      
      file.rename(out, file)
    }
  )
}


shinyApp(ui = ui, server = server)